router.put("/update", verifyToken, async (req, res) => {
  const {
    id, // This is your custom hospital ID
    name,
    email,
    phone,
    address,
    city,
    state,
    zipCode,
    specDrName,
    numberOfDoctors,
    numberOfNurses,
    aboutHospital,
    facilities,
    website,
    openingHours,
    experience,
    specialist,
    languagesSpoken,
    insuranceAccepted,
    emergencyContact,
    degree,
    password, // Include password in request body
  } = req.body;

  console.log("Requested body:", req.body);

  try {
    // Find hospital by custom 'id' field
    const hospital = await Hospital.findOne({ id });
    if (!hospital)
      return res.status(404).json({ message: "Hospital not found" });

    // If a new password is provided, hash it
    let hashedPassword = hospital.password; // Keep existing password by default
    if (password && password.trim()) {
      const salt = await bcrypt.genSalt(10);
      hashedPassword = await bcrypt.hash(password, salt);
    }

    // Update hospital's profile fields only if new values are provided
    hospital.name = name || hospital.name;
    hospital.email = email || hospital.email;
    hospital.password = hashedPassword; // Ensure hashed password is set
    hospital.phone = phone || hospital.phone;
    hospital.address = address || hospital.address;
    hospital.city = city || hospital.city;
    hospital.state = state || hospital.state;
    hospital.zipCode = zipCode || hospital.zipCode;
    hospital.specDrName = specDrName || hospital.specDrName;
    hospital.numberOfDoctors = numberOfDoctors || hospital.numberOfDoctors;
    hospital.numberOfNurses = numberOfNurses || hospital.numberOfNurses;
    hospital.aboutHospital = aboutHospital || hospital.aboutHospital;
    hospital.facilities = facilities || hospital.facilities;
    hospital.website = website || hospital.website;
    hospital.openingHours = openingHours || hospital.openingHours;
    hospital.experience = experience || hospital.experience;
    hospital.specialist = specialist || hospital.specialist;
    hospital.languagesSpoken = languagesSpoken || hospital.languagesSpoken;
    hospital.insuranceAccepted =
      insuranceAccepted || hospital.insuranceAccepted;
    hospital.emergencyContact = emergencyContact || hospital.emergencyContact;
    hospital.degree = degree || hospital.degree;

    await hospital.save();

    res.status(200).json({ message: "Profile updated successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
});